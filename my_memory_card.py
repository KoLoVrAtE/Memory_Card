''' Приложение для запоминания информации '''
from PyQt5.QtCore import *
from PyQt5.QtWidgets import *
from random import randint, shuffle
#-------------------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------------------

class Qestion(): # Класс с вопросом и 4-мя ответами

    def __init__(self, qestion, right_answer, wrong_1, wrong_2, wrong_3):
        self.qestion = qestion # Вопрос
        self.right_answer = right_answer # Правильный ответ
        self.wrong_1 = wrong_1 # Неправильный ответ 1
        self.wrong_2 = wrong_2 # Неправильный ответ 2
        self.wrong_3 = wrong_3 # Неправильный ответ 3

#-------------------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------------------

def rand_qestion(qestion_list): # Функция рандомизации порядка вопросов

    for i in range(len(qestion_list)): # Цикл от количества вопросов
        while True: # Пока принудительно не выйдем

            cur_qestion = randint(0, len(qestion_list) - 1) # Рандомный элемент списка (номер элемента)

            if qestion_list[cur_qestion] not in rand_qestion_list: # Если этого элемента нет в новом списке (уже перемешанном)
                rand_qestion_list.append(qestion_list[cur_qestion]) # То добавляем этот элемент в новый список
                break # Выходим из бесконечного цикла

#-------------------------------------------------------------------------------------------------------------------------------------------------------

def check_answer(): # Функция проверки правильного ответа

    global counter_right_answers # Глобализируем переменную (количество правильных ответов)
    global average_count # Глобализируем переменную (процент правильных от общего цисла заданных уже вопросов)
    
    RadioGroupBox.hide() # Скрываем виджет с вопросами

    if answer[0].isChecked(): # Проверка правильного ответа (по кнопке)
        counter_right_answers += 1 # Увеличиваем переменную на 1, если ответ верный
        QLabel_1.setText('Верно') # Меняем текст кнопки на "Верно"
    else: # Иначе если ответ НЕверный
        QLabel_1.setText('Неверно') # Меняем текст кнопки на "Неверно"
    
    QLabel_2.setText('Правильный ответ: ' + answer[0].text()) # Выводим правильный ответ
    AnsBox.show() # Показываем виджет с правильным ответом


    RadioGroup.setExclusive(False) # Разблокировка сброса вариантов (можно выбрать любое число)
    rbtn_1.setChecked(False) # Сбрасываем нажатие кнопки 1
    rbtn_2.setChecked(False) # Сбрасываем нажатие кнопки 2
    rbtn_3.setChecked(False) # Сбрасываем нажатие кнопки 3
    rbtn_4.setChecked(False) # Сбрасываем нажатие кнопки 4
    RadioGroup.setExclusive(True) # Блокировка сброса вариантов (только 1 можно выбрать)


    '''Выводим статистику текстом'''
    if counter_right_answers != 0: # Если кол-во правильных ответов не равно '0' (на '0' делить нельзя)
        average_count = round((counter_right_answers / counter_qesions * 100), 2) # Считаем процент правильных ответов

    print('Статистика:', 
    '\n-Всего вопросов: ' + str(counter_qesions), 
    '\n-Правильных ответов: ' + str(counter_right_answers), 
    '\nРейтинг: ' + str(average_count) + ' %\n')

#-------------------------------------------------------------------------------------------------------------------------------------------------------

def next_qestion(q: Qestion): # Функция выдачи нового вопроса

    AnsBox.hide() # Скрываем виджет с правильным ответом

    shuffle(answer) # Сортировка списка кнопок по их местоположению
    answer[0].setText(q.right_answer) # Задаем правильный ответ на кнопку rbtn_1
    answer[1].setText(q.wrong_1) # Задаем 1-ый неправильный ответ на кнопку rbtn_2
    answer[2].setText(q.wrong_2) # Задаем 2-ой неправильный ответ на кнопку rbtn_3
    answer[3].setText(q.wrong_3) # Задаем 3-ий неправильный ответ на кнопку rbtn_4
    
    Qestions.setText('Вопрос: ' + q.qestion) # Текст вопроса

    RadioGroupBox.show() # Показываем виджет с вопросами

#-------------------------------------------------------------------------------------------------------------------------------------------------------

def start_checking(): # Отвечает за проверку надписи на кнопке

    global counter_qesions # Глобализируем переменную (кольчество заданных вопросов)
    global rand_qestion_list # Глобализируем список (перемешанные вопросы)

    '''Проверка нажатия хотя бы одной кнопки (только одну и можно)'''
    pressing = answer[0].isChecked() or answer[1].isChecked() or answer[2].isChecked() or answer[3].isChecked()

    if counter_qesions < len(rand_qestion_list): # Пока не закончатся вопросы
        if Button.text() == 'Ответить' and pressing: # Если надпись "ответить"
            check_answer() # Вызваем функцию проверки правильного ответа
            Button.setText('Следующий вопрос') # Меняем текст кнопки на "Следующий вопрос"

        elif Button.text() == 'Следующий вопрос' or Button.text() == 'Начать': # Если надпись "Следующий вопрос"
            next_qestion(rand_qestion_list[counter_qesions]) # Вызывем функцию выдачи нового вопроса
            Button.setText('Ответить') # Меняем текст кнопки на "ответить"
            counter_qesions += 1 # Переход на следующий вопрос
    
    else: # В конце выводим результаты
        check_answer() # Вызваем функцию проверки правильного ответа
 
        Button.setText('Посмотреть результат') # Меняем текст кнопки на "Посмотреть результат"
        Button.clicked.connect(statistics) # После нажатия на кнопку вызываем функцию вывода статистики

#-------------------------------------------------------------------------------------------------------------------------------------------------------

def statistics(): # Функция вывода статистики

    AnsBox.hide() # Скрываем виджет с правильным ответом
    Qestions.hide() # Скрываем виджет с вопросами

    Button.setText('Завершить') # Меняем текст кнопки на "Завершить"
    Last_Text1.setText('-Всего вопросов: ' + str(counter_qesions)) # Выводим количество заданных вопросов
    Last_Text2.setText('-Правильных ответов: ' + str(counter_right_answers)) # Выводим количество правильных ответов
    Last_Text3.setText('Рейтинг: ' + str(average_count) + ' %') # Выводим процент правильных ответов

    Last_Widget.show() # Показываем результаты теста

    Button.clicked.connect(exit) # Закрываем программу после нажатия кнопки

#-------------------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------------------

app = QApplication([]) # Создаем приложение
main_win = QWidget() # Формировуем окно приложения
main_win.setWindowTitle('Memory Card') # Задаем название приложению

#-------------------------------------------------------------------------------------------------------------------------------------------------------

Start_Widget = QGroupBox('Старт') # Создаем рамку для виджета с приветствием (сверху название)
Start_Text1 = QLabel('Здравствуйте, эту программу сделал Лаврентьев Эдуард') # Создаем строку с текстом приветствия 1
Start_Text2 = QLabel('Ученик школы программировая Алгоритмика, удачи вам!') # Создаем строку с текстом приветствия 2

start_line = QVBoxLayout() # Создаем вертикальную линию

start_line.addWidget(Start_Text1) # Центруем по вертикальной линии строку приветствия 1
start_line.addWidget(Start_Text2) # Центруем по вертикальной линии строку приветствия 2

Start_Widget.setLayout(start_line) # Объединяем всё в виджет

#-------------------------------------------------------------------------------------------------------------------------------------------------------

Last_Widget = QGroupBox('Результаты:') # Создаем рамку для виджета с результатами теста (сверху название)
Last_Text1 = QLabel() # Создаем строку с текстом количества заданных вопросов
Last_Text2 = QLabel() # Создаем строку с текстом количества правильных ответов
Last_Text3 = QLabel() # Создаем строку с текстом процентов правильных ответов

last_line = QVBoxLayout() # Создаем вертикальную линию

last_line.addWidget(Last_Text1) # Центруем по вертикальной линии строку количества заданных вопросов
last_line.addWidget(Last_Text2) # Центруем по вертикальной линии строку количества правильных ответов
last_line.addWidget(Last_Text3) # Центруем по вертикальной линии строку с процентами правильных ответов

Last_Widget.setLayout(last_line) # Объединяем всё в виджет

Last_Widget.hide() # Скрываем виджет с результатами

#-------------------------------------------------------------------------------------------------------------------------------------------------------

RadioGroupBox = QGroupBox('Варианты ответов:') # Создаем рамку для виджета с вопросами (сверху название)
rbtn_1 = QRadioButton() # Создаем кнопку с ответом №1 (кнопка 1)
rbtn_2 = QRadioButton() # Создаем кнопку с ответом №2 (кнопка 2)
rbtn_3 = QRadioButton() # Создаем кнопку с ответом №3 (кнопка 3)
rbtn_4 = QRadioButton() # Создаем кнопку с ответом №4 (кнопка 4)

layout_ans1 = QHBoxLayout() # Создаем горизонтальную линию
layout_ans2 = QVBoxLayout() # Создаем первая вертикальную линию
layout_ans3 = QVBoxLayout() # Создаем вторая вертикальную линию

layout_ans2.addWidget(rbtn_1) # Центруем по 1-ой вертикальной линии (кнопка 1)
layout_ans2.addWidget(rbtn_2) # Центруем по 1-ой вертикальной линии (кнопка 2)
layout_ans3.addWidget(rbtn_3) # Центруем по 2-ой вертикальной линии (кнопка 3)
layout_ans3.addWidget(rbtn_4) # Центруем по 2-ой вертикальной линии (кнопка 4)
layout_ans1.addLayout(layout_ans2) # Центруем линию с кнопками 1 и 2 по горизонтальной линии
layout_ans1.addLayout(layout_ans3) # Центруем линию с кнопками 3 и 4 по горизонтальной линии

RadioGroupBox.setLayout(layout_ans1) # Объединяем всё в виджет

RadioGroupBox.hide() # Скрываем виджет с вопросами

#-------------------------------------------------------------------------------------------------------------------------------------------------------

RadioGroup = QButtonGroup() # Создаем группу для кнопок (Чтобы управлять их поведением)

RadioGroup.addButton(rbtn_1) # Добавляем в группу кнопку 1
RadioGroup.addButton(rbtn_2) # Добавляем в группу кнопку 2
RadioGroup.addButton(rbtn_3) # Добавляем в группу кнопку 3
RadioGroup.addButton(rbtn_4) # Добавляем в группу кнопку 4

#-------------------------------------------------------------------------------------------------------------------------------------------------------

AnsBox = QGroupBox('Результат теста') # Создаем рамку для виджета с правильным ответом (сверху название)
QLabel_1 = QLabel() # Создаем строку с текстом 1 (верно/неверно)
QLabel_2 = QLabel() # Создаем строку с текстом 2 (вывод правильного ответа)

layout_2 = QVBoxLayout() # Создаем вертикальную линию

layout_2.addWidget(QLabel_1) # Центруем по вертикальной линии строку с текстом 1
layout_2.addWidget(QLabel_2) # Центруем по вертикальной линии строку с текстом 2

AnsBox.setLayout(layout_2) # Объединяем всё в виджет

AnsBox.hide() # Скрываем виджет с правильным ответом

#-------------------------------------------------------------------------------------------------------------------------------------------------------

Qestions = QLabel() # Создаем сам вопрос
Button = QPushButton('Начать') # Создаем кнопку Ответить/Следующий вопрос, Посмотреть результаты/Завершить

main_line = QVBoxLayout() # Создаем главную линию (вертикальную)

main_line.addWidget(Start_Widget) # Прикрепляем виджет с приветствием на главную линию
main_line.addWidget(Qestions) # Прикрепляем текст с вопрос на главную линию
main_line.addWidget(RadioGroupBox) # Прикрепляем виджет с вопросами на главную линию
main_line.addWidget(AnsBox) # Прикрепляем виджет с правильным ответом
main_line.addWidget(Last_Widget) # Прикрепляем виджет с результатами на главную линию
main_line.addWidget(Button) # Прикрепляем кнопку для переключения между виджетами на главную линию

#-------------------------------------------------------------------------------------------------------------------------------------------------------

answer = [rbtn_1, rbtn_2, rbtn_3, rbtn_4] # Создаем список кнопок для их перемешивания

qestion_list = [] # Создаем список с вопросом, правильным ответом и неправильными ответами
counter_qesions = 0 # Создаем счётчик для переключения между вопросами (кол-во заданных вопросов)
counter_right_answers = 0 # Создаем счётчик для подсчета правильных ответов
average_count = 0 # Создаем счётчик для подсчета процента правильных ответов от кол-ва заданных вопросов

'''Далее сами вопросы'''

qestion_list.append(Qestion('Хребты Скалистый и Пастбищный являются ...', 
                    'куэстами', 'грабенами', 'горстами', 'лакколитами'))

qestion_list.append(Qestion('Государственный язык Португалии?', 
                    'Португальский', 'Английский', 'Испанский', 'Французский'))

qestion_list.append(Qestion('Какая лодка не утонет?', 
                    'Из бетона', 'Из перьев', 'Из растений', ' Из микросхем'))

qestion_list.append(Qestion('Самой высокой вершиной Кавказа является ...', 
                    'Эльбрус', 'Барбадюзю', 'Шхора', 'Казбек'))

qestion_list.append(Qestion('Какие народы Кавказа НЕ исчезли?', 
                    'Абазины', 'Аккисы', 'Аррехи', 'Аспургиане'))

qestion_list.append(Qestion('По своему строению Кавказские горы являются ...', 
                    'складчато-глыбоватыми', 'складчатыми', 'вулканическими', 'глыбоватыми'))

qestion_list.append(Qestion('Как называют заболоченные пространства \nв низовьях Терека и Кубани?', 
                    'Плавни', 'Лиманы', 'Бары', 'Боры'))

qestion_list.append(Qestion('Укажите господствующий местный ветер на Кавказе.', 
                    'Фен', 'Суховей', 'Метель', 'Поземка'))

qestion_list.append(Qestion('Какое питание преобладает у рек Кавказа?', 
                    'Ледниковое', 'Смешанное', 'Дождевое', 'Подземное'))

qestion_list.append(Qestion('На западные районы Кавказа приходится \nбольшее количество осадков, чем на восточное по причине ...', 
                    'расположения относительно\n Атлантического океана', 'множества рек', 'холодного ветра', 'высоты'))

'''Это все вопросы'''

rand_qestion_list = [] # Создаем пустой список 'qestion_list' с элементами в рандомном порядке

rand_qestion(qestion_list) # Запускаем функцию рандомизации порядка вопросов

#-------------------------------------------------------------------------------------------------------------------------------------------------------

Button.clicked.connect(Start_Widget.hide) # Скрываем виджет с приветствием после нажатия кнопки
Button.clicked.connect(RadioGroupBox.show) # Показываем виджет с первым вопросом после нажатия кнопки
Button.clicked.connect(start_checking) # Запускаем фунцию с выдачей вопросов после нажатия кнопки

#-------------------------------------------------------------------------------------------------------------------------------------------------------

main_win.setLayout(main_line) # Прикрепляем главную линию на главную форму
main_win.show() # Отображаем главную форму
app.exec() # Не даем закрыть приложение